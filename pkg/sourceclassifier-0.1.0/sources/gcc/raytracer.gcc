/* -*- mode: c -*-
 * The Great Computer Language Shootout
 * http://shootout.alioth.debian.org/
 *
 * Jon Harrop, 2005
 * Compile: gcc -Wall -O3 -ffast-math -lm -std=c99 raytracer.c -o raytracer
 */


#include <float.h>
#include <math.h>
#include <stdlib.h>
#include <stdio.h>

double delta;

typedef struct { double x, y, z; } Vec;
Vec vec(double ix, double iy, double iz)
{ Vec a; a.x = ix; a.y = iy; a.z = iz; return a; }
Vec add(Vec a, Vec b) { return vec(a.x + b.x, a.y + b.y, a.z + b.z); }
Vec sub(Vec a, Vec b) { return vec(a.x - b.x, a.y - b.y, a.z - b.z); }
Vec scale(double a, Vec b) { return vec(a * b.x, a * b.y, a * b.z); }
double dot(Vec a, Vec b) { return a.x*b.x + a.y*b.y + a.z*b.z; }
Vec unitise(Vec a) { return scale(1 / sqrt(dot(a, a)), a); }

typedef struct { Vec orig, dir; } Ray;
Ray ray(Vec o, Vec d) { Ray r; r.orig = o; r.dir = d; return r; }

typedef enum {SphereTag, GroupTag} Tag;
typedef struct { Vec center; double radius; } Sphere;
Sphere sphere(Vec c, double r) { Sphere s; s.center=c; s.radius=r; return s; }
typedef struct { Sphere bound; int n; void *child; } Group;
typedef struct { Tag tag; union { Sphere s; Group g; } data; } Scene;

double ray_sphere(const Ray *r, const Sphere *s) {
  Vec v = sub(s->center, r->orig);
  double b = dot(v, r->dir), disc = b*b - dot(v, v) + s->radius * s->radius;
  if (disc < 0) return INFINITY;
  double d = sqrt(disc), t2 = b + d;
  if (t2 < 0) return INFINITY;
  double t1 = b - d;
  return (t1 > 0 ? t1 : t2);
}

void intersect(double *lambda, Vec *normal, const Ray *r, const Scene scene) {
  switch (scene.tag) {
  case SphereTag : {
    Sphere s = scene.data.s;
    double l = ray_sphere(r, &s);
    if (l >= *lambda) return;
    *lambda = l;
    *normal = unitise(add(r->orig, sub(scale(l, r->dir), s.center)));
    break;
  }
  case GroupTag : {
    Group g = scene.data.g;
    if (ray_sphere(r, &g.bound) >= *lambda) return;
    for (int i=0; i<g.n; ++i)
      intersect(lambda, normal, r, ((Scene *)g.child)[i]);
    break;
  }
  }
}

double ray_trace(Vec light, Ray r, Scene scene) {
  double lambda = INFINITY;
  Vec n = vec(0, 0, 0);
  intersect(&lambda, &n, &r, scene);
  if (lambda == INFINITY) return 0;
  double g = dot(n, light), l = INFINITY;
  if (g <= 0) return 0.;
  Ray r2 = ray(add(r.orig, scale(lambda, add(r.dir, scale(delta, n)))),
	       light);
  intersect(&l, &n, &r2, scene);
  return (l == INFINITY ? g : 0);
}

Scene create(int level, double r, double x, double y, double z) {
  Scene scene;
  if (level == 1) {
    scene.tag = SphereTag;
    scene.data.s = sphere(vec(x, y, z), r);
  } else {
    Group *g = &scene.data.g;
    Scene *cs;
    scene.tag = GroupTag;
    g->bound = sphere(vec(x, y, z), 3*r);
    g->n = 5;
    g->child = cs = (Scene *)malloc(g->n * sizeof(Scene));
    double rn = 3*r/sqrt(12.);
    for (int i=0; i<4; ++i)
      cs[i] = create(level-1, r/2,
		     x - ((i&1)*2-1)*rn, y + rn, z - ((i/2)*2-1)*rn);
    cs[g->n - 1] = create(1, r, x, y, z);
  }
  return scene;
}

void destroy(Scene scene) {
  if (scene.tag == GroupTag) {
    for (int i=0; i<scene.data.g.n; ++i)
      destroy(((Scene *)scene.data.g.child)[i]);
    free(scene.data.g.child);
  }
}

int main(int argc, char *argv[]) {
  delta = sqrt(DBL_EPSILON);
  int level = 6, n = (argc==2 ? atoi(argv[1]) : 256), ss = 4;
  Vec light = sub(vec(0, 0, 0), unitise(vec(-1, -3, 2)));
  Scene scene = create(level, 1, 0, -1, 0); // Build the scene
  printf("P5\n%d %d\n255\n", n, n);
  for (int y=n-1; y>=0; --y)
    for (int x=0; x<n; ++x) {
      double g=0;
      for (int dx=0; dx<ss; ++dx)
	for (int dy=0; dy<ss; ++dy) {
	  Vec d=vec(x+(double)dx/ss-n/2., y+(double)dy/ss-n/2., n);
	  g += ray_trace(light, ray(vec(0, 0, -4), unitise(d)), scene);
	}
      printf("%c", (char)(.5 + 255*g/(ss*ss)));
    }
  destroy(scene);
  return 0;
}
