# The Computer Language Benchmarks Game
# http://shootout.alioth.debian.org/
# contributed by Tupteq
#
# Based on codes from PDF and Nice #3 version.
# Before use of threading.Condition I tried semaphores (code similar to
# C code from PDF), but it was slower.

from __future__ import with_statement  # Required until Python 2.6

import sys
from threading import Thread, Condition

# Constatnts
all_colors = blue, red, yellow = "blue", "red", "yellow"
stop = 0, blue  # Stop condition


def complement(c1, c2):
    # I used 'is' except '==' here, it's faster
    return (c1 if c1 is c2
        else (yellow if c2 is red else red) if c1 is blue
        else (yellow if c2 is blue else blue) if c1 is red
        else (red if c2 is blue else blue))


def print_color_changes():
    # Print complement for each combination
    for c1 in all_colors:
        for c2 in all_colors:
            print "%s + %s -> %s" % (c1, c2, complement(c1, c2))


class Mall:
    def __init__(self, n):
        self.first = True
        self.must_wait = False
        self.counter = n
        self.cond = Condition()

    def notify(self, me):
        # "with" makes all the job (no acquire() and release() needed)
        with self.cond:
            while self.must_wait and self.counter > 0:
                self.cond.wait()

            if self.first:
                # Creature is first
                self.a = me
                self.first = False

                while not self.first and self.counter > 0:
                    self.cond.wait()

                he = self.b
                self.must_wait = False
                self.cond.notifyAll()

                self.counter -= 1
            else:
                # Creature is second
                self.b = me
                he = self.a
                self.first = True
                self.must_wait = True
                self.cond.notifyAll()

            return he if self.counter >= 0 else stop


class Creature(Thread):
    def __init__(self, name, color, mall):
        # Thread initialization, thread built in name is not used
        Thread.__init__(self)
        self.name = name
        self.color = color
        self.mall = mall
        self.self_met = 0
        self.met = 0

    def run(self):
        while 1:
            # Go to meeting place
            his_name, his_color = self.mall.notify((self.name, self.color))
            if his_name == 0:
                break

            # Change color and increment counters
            self.color = complement(self.color, his_color)
            if self.name is his_name:
                self.self_met += 1
            self.met += 1


def simulate(colors, n):
    # Prepare and execute simulation
    r = Mall(n)
    creatures = [Creature(i+1, color, r) for i, color in enumerate(colors)]
    for c in creatures:
        c.start()
    for c in creatures:
        c.join()

    # Prepare spellout function
    numbers = ("zero", "one", "two", "three", "four",
        "five", "six", "seven", "eight", "nine")
    def spellout(i):
        return " " + " ".join(numbers[int(x)] for x in str(i))

    # Print results
    print
    print " " + " ".join(colors)
    sum = 0
    for c in creatures:
        sum += c.met
        print str(c.met) + spellout(c.self_met)
    print spellout(sum)


def main():
    n = int(sys.argv[1])
    print_color_changes()
    simulate([blue, red, yellow], n)
    simulate([blue, red, yellow, red, yellow, blue, red, yellow, red, blue], n)

main()
