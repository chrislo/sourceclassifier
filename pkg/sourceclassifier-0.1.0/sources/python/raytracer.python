#!/usr/bin/python -OO
# The Computer Language Shootout Benchmarks
# http://shootout.alioth.debian.org/
#
# contributed by Kevin Carson

import sys
from math import sqrt


rn_coefficient = 3.0 / sqrt(12)
delta = sqrt(2.220446e-16)
infinity = 1.797693e+308


class Vector :
    def __init__(self, x, y, z) :
        self.x = x
        self.y = y
        self.z = z

    def __add__(self, v) :
        return Vector(self.x + v.x, self.y + v.y, self.z + v.z)

    def __sub__(self, v) :
        return Vector(self.x - v.x, self.y - v.y, self.z - v.z)

    def __rmul__(self, n) :
        return Vector(self.x * n, self.y * n, self.z * n)

    def dot(self, v) :
        return self.x * v.x + self.y * v.y + self.z * v.z

    def unitise(self) :
        return (1 / sqrt(self.dot(self))) * self


class Ray :
    def __init__(self, o, d) :
        self.origin = o
        self.direction = d


class Scene :
    def __init__(self) :
        pass

    def intersect(self, point, vector, ray) :
        return 0.0, vector

    def delete(self) :
        if type(self) == Group :
            for i in self.obs :
                self.objs[i].delete()
                self.objs[i] = None
            self = None


class Sphere(Scene) :
    def __init__(self, center, radius) :
        Scene.__init__(self)
        self.center = center
        self.radius = radius

    def ray_sphere(self, ray) :
        v = self.center - ray.origin
        b = v.dot(ray.direction)
        disc = b * b - v.dot(v) + self.radius * self.radius

        if disc < 0.0 :
            return infinity

        d = sqrt(disc)
        t2 = b + d

        if t2 < 0.0 :
            return infinity

        t1 = b - d

        if t1 > 0.0 :
            return t1

        else :
            return t2


    def intersect(self, pt, normal, ray) :
        l = self.ray_sphere(ray)

        if l >= pt :
            return pt, normal

        normal = (ray.origin + l * ray.direction - self.center).unitise()
        return l, normal


class Group(Scene) :
    def __init__(self, b) :
        Scene.__init__(self)
        self.bound = b
        self.objs = []

    def intersect(self, pt, normal, ray) :
        l = self.bound.ray_sphere(ray)
        
        if l >= pt :
            return pt, normal

        for obj in self.objs :
            pt, normal = obj.intersect(pt, normal, ray)

        return pt, normal
    

def ray_trace(light, ray, scene) :
    l = infinity
    normal = Vector(0.0, 0.0, 0.0)
    l, normal = scene.intersect(l, normal, ray)

    if l == infinity :
        return 0.0

    o = ray.origin + l * ray.direction + delta * normal
    g = -normal.dot(light)
    l = infinity

    if g <= 0.0 :
        return 0.0

    l, normal = scene.intersect(
        l,
        normal,
        Ray(o, Vector(0.0, 0.0, 0.0) - light)
    )

    if l == infinity :
        return g

    else :
        return 0.0


def create(level, r, x, y, z) :
    sphere = Sphere(Vector(x, y, z), r)

    if level == 1 :
        return sphere

    group = Group(Sphere(Vector(x, y, z), 3.0 * r))
    group.objs.append(sphere)

    rn = rn_coefficient * r

    for dz in xrange(-1, 2, 2) :
        for dx in xrange(-1, 2, 2) :
            group.objs.append(
                create(level - 1, r / 2.0, x - dx * rn, y + rn, z - dz * rn)
            )

    return group


def main() :
    if len(sys.argv) == 2 :
        n = int(sys.argv[1])
        
    else :
        n = 256

    level = 6
    scene = create(level, 1.0, 0.0, -1.0, 0.0)

    ss = 4
    ss2 = ss * ss

    cout = sys.stdout.write

    cout("P5\n%d %d\n255\n" % (n, n))

    for y in xrange(n - 1, -1, -1) :
        for x in xrange(n) :
            g = 0.0
            for dx in xrange(ss) :
                for dy in xrange(ss) :
                    g += ray_trace(
                        Vector(-1.0, -3.0, 2.0).unitise(),
                        Ray(
                            Vector(0.0, 0.0, -4.0),
                            Vector(
                                x + dx / float(ss) - n / 2.0,
                                y + dy / float(ss) - n / 2.0,
                                float(n)
                            ).unitise()
                        ),
                        scene
                    )
            g = 0.5 + 255 * g / ss2
            cout(chr(int(g)))
    scene.delete()


main()
