# The Computer Language Benchmarks Game
# http://shootout.alioth.debian.org/
#
# contributed by - not known -
# modified by Pilho Kim (first GMP version)
# modified by Dani Nanz (2007-09-14)

import sys
import itertools
import gmpy


mpz0, mpz1 = gmpy.mpz(0), gmpy.mpz(1)
mpz2, mpz3 = gmpy.mpz(2), gmpy.mpz(3)
mpz4, mpz10 = gmpy.mpz(4), gmpy.mpz(10)


def gen_x(k=mpz0):

    while 1:
        k += mpz1
        yield (k, mpz4 * k + mpz2, mpz0, mpz2 * k + mpz1)


def compose((a, b, c, d), (e, f, g, h)):  

    return (a * e,
            a * f + b * h,
            c * e + d * g,
            c * f + d * h)


def extract((a, b, c, d), j):
    return (a * j + b) // (c * j + d)


def pi_digits():

    z = (mpz1, mpz0, mpz0, mpz1)
    x = gen_x()
    while 1:
        y = extract(z, mpz3)
        while y != extract(z, mpz4):
            z = compose(z, x.next())
            y = extract(z, mpz3)
        z = compose((mpz10, -mpz10 * y, mpz0, mpz1), z)
        yield str(y)


def main(islice=itertools.islice):

    n = int(sys.argv[1])
    digits = pi_digits()
    w = 10
    out = []
    for i in xrange(w, n+1, w):
        out.extend([''.join(islice(digits, w)), i])
    print ('%s\t:%d\n' * (len(out) / 2)) % tuple(out),
    if n % w > 0:
        print "%s\t:%d" % (''.join(islice(digits, n % w)).ljust(w), n)


main()
