/* The Computer Language Shootout
   http://shootout.alioth.debian.org/

   contributed by Josh Goldfoot
*/

#include <semaphore.h>
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

typedef enum { Blue, Red, Yellow, Faded } color;

sem_t AtMostTwo;
sem_t Mutex;
sem_t SemPriv;

int mpStatus = 1;
color aColor, bColor;
long meetingsLeft;
long reports[4];

color complementaryColor (color c1, color c2)
{
  if (c2 == Faded) return Faded;
  if (c1 == c2) return c1;
  switch (c1)
    {
    case Blue:
      return c2 == Red ? Yellow : Red;
    case Red:
      return c2 == Blue ? Yellow : Blue;
    case Yellow:
      return c2 == Blue ? Red : Blue;
    default:
      return c1;
    }
}

color Cooperation (int id, color c)
{
  color otherColor;

  sem_wait (&AtMostTwo);
  sem_wait (&Mutex);
  switch (mpStatus)
    {
    case 1:
      aColor = c;
      mpStatus = 2;
      sem_post (&Mutex);
      sem_wait (&SemPriv);
      otherColor = bColor;
      sem_post (&Mutex);
      sem_post (&AtMostTwo);
      sem_post (&AtMostTwo);
      break;
    case 2:
      mpStatus = (--meetingsLeft > 0 ? 1 : 3);
      bColor = c;
      otherColor = aColor;
      sem_post (&SemPriv);
      break;
    case 3:
    default:
      otherColor = Faded;
      sem_post (&Mutex);
      sem_post (&AtMostTwo);
    }
  return otherColor;
}

void chameneosCode (void *args)
{
  int myId;
  long meetings;
  color myColor, otherColor;
  sscanf ((char *) args, "%d %d", &myId, &myColor);
  meetings = 0;
  while (myColor != Faded)
    {
      otherColor = Cooperation (myId, myColor);
      myColor = complementaryColor (myColor, otherColor);
      meetings++;
    }
  reports[myId] = meetings - 1;
}

int main (int argc, char *argv[])
{
  color tabColor[4] = { Blue, Red, Yellow, Blue };
  pthread_t tabPid[4];
  char theArgs[32][4];
  int i;

  sem_init (&AtMostTwo, 0, 2);
  sem_init (&Mutex, 0, 1);
  sem_init (&SemPriv, 0, 0);

  meetingsLeft = (argc > 1) ? atoi (argv[1]) : 1000000;

  for (i = 0; i < 4; i++)
    {
      sprintf (theArgs[i], "%d %d", i, tabColor[i]);
      pthread_create (&tabPid[i], NULL, (void *(*)(void *)) chameneosCode,
		      theArgs[i]);
    }
  for (i = 0; i < 4; i++)
    pthread_join (tabPid[i], NULL);

  long sum = reports[0];
  for (i = 1; i < 4; i++)
    sum += reports[i];
  printf ("%d\n", sum);

  return 0;
}
